#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/scripts/help/common.help"
source "$SCRIPT_DIR/scripts/help/main.help"

MODEL_NAME=""
GPUS="all"  # Default value
CONTAINER="tensorrt_llm/release"
REMAINING_ARGS=()

print_usage() {
    show_main_help
}

# Check for help flags anywhere in arguments
HELP_REQUESTED=false
FILTERED_ARGS=()

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help)
            HELP_REQUESTED=true
            ;;
        --list-built-engines)
            list_available_tags "$2"
            exit 1
            ;;
        --list-available-models)
            list_available_models 
            exit 1
            ;;
        *)
            FILTERED_ARGS+=("$arg")
            ;;
    esac
done

set -- "${FILTERED_ARGS[@]}"

# Check if first argument is a valid command
VALID_COMMANDS=("build-engine" "trtllm-serve" "bash")
if [[ "$#" -eq 0 ]]; then
    print_usage
    exit 1
fi

COMMAND="$1"
shift

# Handle help requests
if [ "$HELP_REQUESTED" = true ]; then
    if [[ " ${VALID_COMMANDS[*]} " =~ " ${COMMAND} " ]]; then
        # Command-specific help - pass through to container
        REMAINING_ARGS+=("--help")
    else
        # General help
        print_usage
        exit 1
    fi
fi

# Validate command
if [[ ! " ${VALID_COMMANDS[*]} " =~ " ${COMMAND} " ]]; then
    echo "Error: Unknown command '$COMMAND'"
    echo
    print_usage
    exit 1
fi

# Parse remaining arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --model)
            MODEL_NAME="$2"
            shift 2
            ;;
        --gpus)
            GPUS="$2"
            shift 2
            ;;
        --container)
            CONTAINER="$2"
            shift 2
            ;;
        *)
            # All other arguments get passed to the command
            REMAINING_ARGS+=("$1")
            shift
            ;;
    esac
done

# Special handling for help when no model is provided
if [ -z "$MODEL_NAME" ] && [[ ! " ${REMAINING_ARGS[*]} " =~ " --help " ]] && [ ! $COMMAND = "bash" ]; then
    echo "Error: --model argument is required"
    echo
    print_usage
    exit 1
fi

if [ -n "$MODEL_NAME" ] && [ ! -d "./model_weights/$MODEL_NAME" ]; then
    echo "Error: Directory './model_weights/$MODEL_NAME' not found in the current directory"
    echo
    list_available_models
    exit 1
fi

DOCKER_ARGS=(
    "run" "--gpus" "$GPUS"
    "-e" "MODEL=$MODEL_NAME"
    "--rm"
    "-it"
    "-v" "$HOME/.cache/huggingface:/root/.cache/huggingface"
    "-v" "./scripts:/scripts"
    "-v" "./engines:/engines"
    "--net=host"
    "--ipc=host"
    "--ulimit" "memlock=-1"
    "--ulimit" "stack=67108864"
)

if [ -n "$MODEL_NAME" ]; then
    DOCKER_ARGS+=("-v" "./model_weights:/model_weights")
fi

if [ "$COMMAND" != "bash" ]; then
  COMMAND="/scripts/$COMMAND"
fi

DOCKER_ARGS+=("$CONTAINER" "$COMMAND")
DOCKER_ARGS+=("${REMAINING_ARGS[@]}")

echo -e "\033[32mRunning docker:"
echo -n "    docker run"

i=1  # Skip 'run' since we already printed it
while [ $i -lt ${#DOCKER_ARGS[@]} ]; do
    arg="${DOCKER_ARGS[$i]}"

    # Check if this looks like a flag (starts with -)
    if [[ "$arg" =~ ^- ]]; then
        # Check if next argument exists and doesn't start with -
        if [ $((i + 1)) -lt ${#DOCKER_ARGS[@]} ] && [[ ! "${DOCKER_ARGS[$((i + 1))]}" =~ ^- ]]; then
            # Flag with value
            echo " \\"
            echo -n "      $arg ${DOCKER_ARGS[$((i + 1))]}"
            i=$((i + 2))
        else
            # Flag without value
            echo " \\"
            echo -n "      $arg"
            i=$((i + 1))
        fi
    else
        # Not a flag, probably container name or command
        echo " \\"
        echo -n "      $arg"
        i=$((i + 1))
    fi
done
echo
echo

echo -e "Executing: $COMMAND ${REMAINING_ARGS[*]}"
echo -e "Model: ${MODEL_NAME:-"(none - help mode)"}"
echo -e "GPUs: $GPUS"
echo -e "\033[0m"
exec docker "${DOCKER_ARGS[@]}"
