#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/scripts/help/common.help"
source "$SCRIPT_DIR/scripts/help/main.help"
source "$SCRIPT_DIR/scripts/model-selector"

MODEL_NAME=""
GPUS="all"  # Default value
CONTAINER="tensorrt_llm/release"
REMAINING_ARGS=()

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}


print_usage() {
    show_main_help
}

select_container() {
    echo
    echo "No --container specified. Available TensorRT-LLM containers:"
    echo "=========================================================="

    # Get all images with tensorrt-llm and cuda[digits]-torch-cuda-arch pattern
    mapfile -t containers < <(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "tensorrt[_-]?llm.*cuda[0-9]+-torch-cuda-arch" | sort)

    if [[ ${#containers[@]} -eq 0 ]]; then
      error "No TensorRT-LLM containers found.\r\n\tSpecify a container using --container (use trt-llab --help for more info)\r\n\tOr build a new container using the ./build-container tool"
    fi

    # If only one container, use it automatically
    if [[ ${#containers[@]} -eq 1 ]]; then
        CONTAINER="${containers[0]}"
        echo "Found 1 container, using: $CONTAINER"
        echo
        return 0
    fi

    # Display numbered list
    counter=1
    for container in "${containers[@]}"; do
        echo "$counter. $container"
        ((counter++))
    done

    echo
    # Loop until valid selection is made
    while true; do
        read -p "Select container (1-${#containers[@]}): " selection

        if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#containers[@]} ]]; then
            container_index=$((selection - 1))
            CONTAINER="${containers[$container_index]}"
            echo "Selected container: $CONTAINER"
            break
        else
            echo "Invalid selection. Please enter a number between 1 and ${#containers[@]}."
        fi
    done
    echo
}

# Check for help flags anywhere in arguments
HELP_REQUESTED=false
FILTERED_ARGS=()

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help)
            HELP_REQUESTED=true
            shift
            ;;
        --list-built-engines)
            list_available_tags "$2"
            exit 1
            ;;
        --list-available-models)
            list_available_models 
            exit 1
            ;;
        *)
            FILTERED_ARGS+=("$1")
            shift
            ;;
    esac
done

set -- "${FILTERED_ARGS[@]}"

# Check if first argument is a valid command
VALID_COMMANDS=("build-engine" "trtllm-serve" "bash")
if [[ "$#" -eq 0 ]]; then
    print_usage
    exit 1
fi

COMMAND="$1"
shift

# Handle help requests
if [ "$HELP_REQUESTED" = true ]; then
    if [[ " ${VALID_COMMANDS[*]} " =~ " ${COMMAND} " ]]; then
        # Command-specific help - pass through to container
        REMAINING_ARGS+=("--help")
    else
        # General help
        print_usage
        exit 1
    fi
fi

# Validate command
if [[ ! " ${VALID_COMMANDS[*]} " =~ " ${COMMAND} " ]]; then
    echo "Error: Unknown command '$COMMAND'"
    echo
    print_usage
    exit 1
fi

# Parse remaining arguments
CONTAINER_SPECIFIED=false
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --model)
            MODEL_NAME="$2"
            shift 2
            ;;
        --gpus)
            GPUS="$2"
            shift 2
            ;;
        --container)
            CONTAINER="$2"
            CONTAINER_SPECIFIED=true
            shift 2
            ;;
        *)
            # All other arguments get passed to the command
            REMAINING_ARGS+=("$1")
            shift
            ;;
    esac
done

if [ "$CONTAINER_SPECIFIED" = false ] && [[ ! " ${REMAINING_ARGS[*]} " =~ " --help " ]]; then
    select_container
fi

# Handle model selection for commands that require a model
if [[ "$COMMAND" == "build-engine" || "$COMMAND" == "trtllm-serve" ]]; then
    # If no model specified and not asking for help, run the model selector
    if [ -z "$MODEL_NAME" ] && [[ ! " ${REMAINING_ARGS[*]} " =~ " --help " ]]; then
        echo "No --model specified. Please select a model:"
        echo
        
        # Run the model selector
        if run_model_weights_selector; then
            MODEL_NAME="$SELECTED_MODEL"
            echo
            log "Selected model: $MODEL_NAME"
        else
            echo "No model selected. Exiting."
            exit 1
        fi
    fi
    
    # Validate the selected/provided model exists
    if [ -n "$MODEL_NAME" ] && [ ! -d "./model_weights/$MODEL_NAME" ]; then
        echo "Error: Directory './model_weights/$MODEL_NAME' not found in the current directory"
        echo
        list_available_models
        exit 1
    fi
fi

# Special handling for help when no model is provided for non-model commands
if [ -z "$MODEL_NAME" ] && [[ ! " ${REMAINING_ARGS[*]} " =~ " --help " ]] && [[ "$COMMAND" != "bash" && "$COMMAND" != "build-engine" && "$COMMAND" != "trtllm-serve" ]]; then
    echo "Error: --model argument is required"
    echo
    print_usage
    exit 1
fi

DOCKER_ARGS=(
    "run" "--gpus" "$GPUS"
    "-e" "MODEL=$MODEL_NAME"
    "--rm"
    "-it"
    "-v" "$HOME/.cache/huggingface:/root/.cache/huggingface"
    "-v" "./scripts:/scripts"
    "-v" "./engines:/engines"
    "-v" "./model_build_configs:/model_build_configs"
    "-v" "./extra_llm_api_options:/extra_llm_api_options"
    "-v" "./model_serve_args:/model_serve_args"
    "-v" "./benchmarks:/benchmarks"
    "--net=host"
    "--ipc=host"
    "--ulimit" "memlock=-1"
    "--ulimit" "stack=67108864"
)

if [ -n "$MODEL_NAME" ]; then
    DOCKER_ARGS+=("-v" "./model_weights:/model_weights")
fi

if [ "$COMMAND" != "bash" ]; then
  COMMAND="/scripts/$COMMAND"
fi

DOCKER_ARGS+=("$CONTAINER" "$COMMAND")
DOCKER_ARGS+=("${REMAINING_ARGS[@]}")

echo -e "\033[32mRunning docker:"
echo -n "    docker run"

i=1  # Skip 'run' since we already printed it
while [ $i -lt ${#DOCKER_ARGS[@]} ]; do
    arg="${DOCKER_ARGS[$i]}"

    # Check if this looks like a flag (starts with -)
    if [[ "$arg" =~ ^- ]]; then
        # Check if next argument exists and doesn't start with -
        if [ $((i + 1)) -lt ${#DOCKER_ARGS[@]} ] && [[ ! "${DOCKER_ARGS[$((i + 1))]}" =~ ^- ]]; then
            # Flag with value
            echo " \\"
            echo -n "      $arg ${DOCKER_ARGS[$((i + 1))]}"
            i=$((i + 2))
        else
            # Flag without value
            echo " \\"
            echo -n "      $arg"
            i=$((i + 1))
        fi
    else
        # Not a flag, probably container name or command
        echo " \\"
        echo -n "      $arg"
        i=$((i + 1))
    fi
done
echo
echo

echo -e "Executing: $COMMAND ${REMAINING_ARGS[*]}"
echo -e "Model: ${MODEL_NAME:-"(none - help mode)"}"
echo -e "GPUs: $GPUS"
echo -e "\033[0m"
exec docker "${DOCKER_ARGS[@]}"
