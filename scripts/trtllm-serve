#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/help/common.help"
source "$SCRIPT_DIR/help/trtllm-serve.help"
TAG=""

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

soft_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

show_help() {
    show_trtllm_serve_help
}

TEMP_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --tag)
            TAG="$2"
            shift 2  # Skip both --tag and its value
            ;;
        *)
            TEMP_ARGS+=("$1")  # Need parentheses for array append
            shift
            ;;
    esac
done

set -- "${TEMP_ARGS[@]}"

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help)
            show_help
						exit 0
            ;;
	      --serve-config)
            SERVE_CONFIG="$2"
            shift 2
            ;;
        --list-tags)
            echo -e "\033[33mAvailable tags for model $MODEL:"
            if [ -d "/engines/$MODEL" ]; then
                ls -1 /engines/$MODEL/ 2>/dev/null || echo "No tags found"
            else
                echo "No engine directory found for model $MODEL"
            fi
            echo -e "\033[0m"
            exit 0
            ;;
        --show-serve-config)
            if [ -z "$TAG" ]; then
                if [ -n "$2" ] && [[ "$2" != --* ]]; then
                    TAG="$2"
                    shift
                else
                    TAG="default"
                fi
            fi
            shift
            ;;
        *)
	    echo
        echo "Unknown parameter: $1"
	    	show_help
				exit 1
        ;;
    esac
done

if [ -z "$TAG" ]; then
    TAG="default"
fi

# Check if MODEL environment variable is set
if [ -z "$MODEL" ]; then
    echo "Error: MODEL environment variable is not set"
    exit 1
fi

# Check if engine directory exists
ENGINE_PATH="/engines/$MODEL/$TAG"

build_serve_args() {
  if [[ -n $SERVE_CONFIG ]]; then
    log "\033[32m Using --serve-config $SERVE_CONFIG\033[0m"
  else
    SERVE_CONFIG='default'
    log "--serve-config was left blank. Going to use 'default'"
  fi

  SERVE_ARGS_FILE="/model_serve_args/$MODEL.$SERVE_CONFIG.json"

  if [[ ! -f "$SERVE_ARGS_FILE" ]]; then
    SERVE_ARGS_FILE="/model_serve_args/$SERVE_CONFIG.json"
  fi

  if [[ ! -f "$SERVE_ARGS_FILE" ]]; then
    error "Serve args file not found (order of search):\r\n\t* /model_serve_args/$MODEL.$SERVE_CONFIG.json\r\n\t* $SERVE_ARGS_FILE"
  else
    log "Found serve args file at $SERVE_ARGS_FILE"
  fi
}

show_config() {
    jq ".args" "$SERVE_ARGS_FILE"
}

build_serve_args

build_serve_command() {
    local serve_args=""
    local is_pytorch_backend=false
    local extra_llm_api_options=""

    # Check if the configuration exists
    if ! jq -e ".args" "$SERVE_ARGS_FILE" > /dev/null 2>&1; then
        soft_error " Configuration '.args' not found in ${SERVE_ARGS_FILE}\r\nAvailable configurations\r\n"
        jq -r 'keys[]' "$SERVE_ARGS_FILE" 2>/dev/null
        exit 1
    fi

    # Extract args from the specified configuration
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            key=$(echo "$line" | cut -d'=' -f1)
            value=$(echo "$line" | cut -d'=' -f2-)

            # Skip example comments
            if [[ "$key" == "example_comment" ]]; then
                continue
            fi

            if [[ -n "$value" ]] && [[ "$key" == "--extra_llm_api_options" ]]; then
              value="/extra_llm_api_options/$value"
            fi

            if [[ "$key" == "--backend" ]]; then
              is_pytorch_backend=true
            fi

            if [[ -n "$value" ]]; then
                serve_args+=" $key $value"
            else
                serve_args+=" $key"
            fi
            echo "Using serve config: $key $value"
        fi
    done < <(jq -r ".args | to_entries[] | \"\(.key)=\(.value)\"" "$SERVE_ARGS_FILE" 2>/dev/null)

    if [[ "$is_pytorch_backend" == true ]]; then
      SERVE_COMMAND="trtllm-serve serve ${serve_args} ${TOKENIZER_DIR}"
    else
      if [ ! -d "$ENGINE_PATH" ]; then
          echo "Error: Engine directory '$ENGINE_PATH' not found"
          echo "Available tags for model $MODEL:"
          if [ -d "/engines/$MODEL" ]; then
              ls -1 /engines/$MODEL/ 2>/dev/null || echo "No tags found"
          else
              echo "No engine directory found for model $MODEL"
          fi
          exit 1
      fi
      SERVE_COMMAND="trtllm-serve ${ENGINE_PATH} --tokenizer ${TOKENIZER_DIR} ${serve_args}"
    fi
}

echo "Starting TensorRT-LLM server for model '$MODEL', tag '$TAG', config '$SERVE_ARGS_FILE'"
echo "Engine path: $ENGINE_PATH"

# Set environment variables
export KV_CACHE_FREE_GPU_MEM_FRACTION=0.9
export TOKENIZER_DIR=/model_weights/$MODEL

# Build and execute the serve command
build_serve_command
echo "Executing: $SERVE_COMMAND"
eval "$SERVE_COMMAND"
